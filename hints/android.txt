****************************
to unmask kernel symbol addresses:
(as root)
echo 1 > /proc/sys/kernel/kptr_restrict
cat /proc/kallsyms


****************************

anyone know of a tool that can convert a hex capability flags (e.g. 0000001002203001) into the actual capability names?

whoops, just found it capsh --decode=0xABCDEF

****************************

In newer android (maybe 10+???) to remove 
namespace bs, if you have root,
su -M (maybe su -m on some systems)


****************************
# adb over wifi

# not rooted
adb tcpip 8887
adb connect 10.11.12.13:8887

adb disconnect 10.11.12.13:8887

# show addresses
adb shell ip -f inet addr
adb shell ip -f inet addr show wlan0

# revert back to usb
adb usb

# check if adb port is set
getprop service.adb.tcp.port
# expect [0] or [8887] (example)


****************************
# create and run a java app on android via adb shell
# from https://blog.rom1v.com/2018/03/introducing-scrcpy/

public class HelloWorld {
    public static void main(String... args) {
        System.out.println("Hello, world!");
    }
}
javac -source 1.7 -target 1.7 HelloWorld.java 
dx --dex --output classes.dex HelloWorld.class
adb  push classes.dex /data/local/tmp
adb shell CLASSPATH=/data/local/tmp/classes.dex app_process / HelloWorld


****************************

# scrcpy https://github.com/Genymobile/scrcpy mirrors display over adb
# sndcpy can forward audio, https://github.com/rom1v/sndcpy

****************************
to get data from backup:

# create backup file on laptop:
adb backup -noapk -all

# skip header to get to compressed tar file:
dd if=backup.ab of=backup.zlib bs=24 skip=1
openssl zlib -d -in backup.zlib -out backup.tar
tar xf backup.tar

****************************
to build an individual program in AOSP

from top of AOSP
source build/envsetup.sh
lunch aosp_eng or no arg to get list
mmma external...../dir_of_program

on mac you might need to 
ulimit -n 4096   # to allow more than 256 open files as aosp is file hungry


****************************
to build binary policy from a device android 8 or later:

# from  Android-src/system/core/init/selinux.cpp
secilc /system/etc/selinux/plat_sepolicy.cil -m -M true -G -N -c $policyvers [[list of files below]]  -o policy.30 -f /sys/fs/selinux/null
  
constexpr const char plat_policy_cil_file[] = "/system/etc/selinux/plat_sepolicy.cil";

    if (!ReadFirstLine("/vendor/etc/selinux/plat_sepolicy_vers.txt", plat_vers)) {

bool LoadSplitPolicy() {


policyvers=`cat /sys/fs/selinux/policyvers`
vver=`head /vendor/etc/selinux/plat_sepolicy_vers.txt`

if [ -f /system/etc/selinux/mapping/${vver}.cil ]; then echo "/system/etc/selinux/mapping/${vver}.cil "; fi 
if [ -f /system/etc/selinux/mapping/${vver}.compat.cil ]; then echo "/system/etc/selinux/mapping/${vver}.compat.cil " ; fi 
if [ -f /system_ext/etc/selinux/system_ext_sepolicy.cil ]; then echo "/system_ext/etc/selinux/system_ext_sepolicy.cil " ; fi 
if [ -f /system_ext/etc/selinux/mapping/${vver}.cil ]; then echo "/system_ext/etc/selinux/mapping/${vver}.cil " ; fi 
if [ -f /product/etc/selinux/product_sepolicy.cil ]; then echo "/product/etc/selinux/product_sepolicy.cil " ; fi 
if [ -f /product/etc/selinux/mapping/${vver}.cil ]; then echo "/product/etc/selinux/mapping/${vver}.cil " ; fi 
if [ -f /vendor/etc/selinux/plat_pub_versioned.cil ]; then echo "/vendor/etc/selinux/plat_pub_versioned.cil " ; fi 
if [ -f /vendor/etc/selinux/vendor_sepolicy.cil ]; then echo "/vendor/etc/selinux/vendor_sepolicy.cil " ; fi 
if [ -f /vendor/etc/selinux/nonplat_sepolicy.cil ]; then echo "/vendor/etc/selinux/nonplat_sepolicy.cil " ; fi 
if [ -f /odm/etc/selinux/odm_sepolicy.cil ]; then echo "/odm/etc/selinux/odm_sepolicy.cil " ; fi 

****************************
from a C (NDK) program, to send messages to the log:

#include <android/log.h>

#define APPNAME "MyApp"

__android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "My Log");

Also Make sure you also link against the logging library, in your Android.mk file:

LOCAL_LDLIBS := -llog

Depending on the configuration you might need to use something more than "_VERBOSE" like _ERROR
or it might not make it to the log.


****************************

for Pixel, to get to recovery menu:
1) power off all the way
2) hold Vol Down
3) hold power 
4) ** release both when you see bootloader menu
5) Vol scroll to "Recovery mode" and hit power to select
6) boots to "No command"
7) Hold power
8) tap Vol Up and release both; Recovery menu should appear instantly (before release)

****************************

extracting kernel and root filesystem from boot partition

use unpackbootimg, https://github.com/osm0sis/mkbootimg
 
one of the files you get is boot.img-ramdisk.gz - this is a cpio file, so

mkdir rootfs
cd rootfs
zcat boot.img-ramdisk.gz | cpio -i

extracts all of the files

****************************

verify an apk signature on command line:

apksigner verify my-app.apk; echo $?   # need to check $? == 0 for success

apksigner verify -v foo.apk # actually return verbage on the check

apksigner verify -v --print-certs foo.apk  # to also get the digests for the signer certs

****************************
gdb

put executable on device; /data/local/tmp/
make sure it is executable (chmod +x)
put gdbserver on device 
make sure it is executable

gdbserver can be found in the ndk, e.g.:
.../ndk-bundle/prebuilt/android/arm-64/gdbserver

on device run
./gdbserver :5309 /data/local/tmp/program

on workstation:
adb forward tcp:5309 tcp:5309

run gdb version for android target:
...ndk-bundle/prebuilt/linux-x86_64/bin/gdb

that start gdb, within gdb:
(gdb) target remote :5309
[bunch of connection messages]
(gdb) br *main
(gdb) continue

***************************************

native compile:

create a toolchain from the script in the ndk:

~/android/ndk-bundle/build/tools/make_standalone_toolchain.py --arch arm --api 26 --install-dir ./android-toolchain
$NDK/build/tools/make_standalone_toolchain.py --arch arm64 --api 23 --install-dir ./toolchain
$NDK/build/tools/make_standalone_toolchain.py --arch x86_644 --api 23 --install-dir ./toolchain

# from https://developer.android.com/ndk/guides/standalone_toolchain

export PATH=$PATH:`pwd`/toolchain/bin

target_host=aarch64-linux-android
export AR=$target_host-ar
export AS=$target_host-clang
export CC=$target_host-clang
export CXX=$target_host-clang++
export LD=$target_host-ld
export STRIP=$target_host-strip

# Tell configure what flags Android requires.
export CFLAGS="-fPIE -fPIC"
export LDFLAGS="-pie"

#### end sample env settings

./android-toolchain/bin/clang net.c

might have to explicitly make it PIE if >5.0 like:
~/bin/android-toolchain.21.aarch64/bin/clang -o server -fPIE tests.c -fPIE -pie

OR, based upon the above env settings:

$CC $CFLAGS $LDFLAGS -o server server.c -Itoolchain/sysroot/usr/include 2>&1

adb push a.out /data/local/tmp/




***************************************


apktool b -o u1-0.apk ubuild/
adb install u1-0.apk
keytool -genkey -v -keystore ~/.android/debug.newkeystore -alias signkey -keyalg RSA -keysize 2048 -validity 20000
jarsigner -verbose -keystore ~/.android/debug.newkeystore u1-0.apk signkey
adb install u1-0.apk 
adb uninstall sg.vantagepoint.uncrackable1
adb install u1-0.apk 

***************************************
 frida gadget

pull apk with adb
unpack apk with apktool
install frida gadget library into app's lib directory
patch smali to load frida library on start
  - need to know app's main routine:
    look for android.intent.action.MAIN in manifest, the <activity> android:name= should be the onCreate() method
