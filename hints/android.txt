
for Pixel, to get to recovery menu:
1) power off all the way
2) hold Vol Down
3) hold power 
4) ** release both when you see bootloader menu
5) Vol scroll to "Recovery mode" and hit power to select
6) boots to "No command"
7) Hold power
8) tap Vol Up and release both; Recovery menu should appear instantly (before release)

****************************

extracting kernel and root filesystem from boot partition

use unpackbootimg, https://github.com/osm0sis/mkbootimg
 
one of the files you get is boot.img-ramdisk.gz - this is a cpio file, so

mkdir rootfs
cd rootfs
zcat boot.img-ramdisk.gz | cpio -i

extracts all of the files

****************************

verify an apk signature on command line:

apksigner verify my-app.apk; echo $?   # need to check $? == 0 for success

apksigner verify -v foo.apk # actually return verbage on the check

apksigner verify -v --print-certs foo.apk  # to also get the digests for the signer certs

****************************
gdb

put executable on device; /data/local/tmp/
make sure it is executable (chmod +x)
put gdbserver on device 
make sure it is executable

gdbserver can be found in the ndk, e.g.:
.../ndk-bundle/prebuilt/android/arm-64/gdbserver

on device run
./gdbserver :5309 /data/local/tmp/program

on workstation:
adb forward tcp:5309 tcp:5309

run gdb version for android target:
...ndk-bundle/prebuilt/linux-x86_64/bin/gdb

that start gdb, within gdb:
(gdb) target remote :5309
[bunch of connection messages]
(gdb) br *main
(gdb) continue

***************************************

native compile:

create a toolchain from the script in the ndk:

~/android/ndk-bundle/build/tools/make_standalone_toolchain.py --arch arm --api 26 --install-dir ./android-toolchain
$NDK/build/tools/make_standalone_toolchain.py --arch arm64 --api 23 --install-dir ./toolchain
$NDK/build/tools/make_standalone_toolchain.py --arch x86_644 --api 23 --install-dir ./toolchain

# from https://developer.android.com/ndk/guides/standalone_toolchain

export PATH=$PATH:`pwd`/toolchain/bin

target_host=aarch64-linux-android
export AR=$target_host-ar
export AS=$target_host-clang
export CC=$target_host-clang
export CXX=$target_host-clang++
export LD=$target_host-ld
export STRIP=$target_host-strip

# Tell configure what flags Android requires.
export CFLAGS="-fPIE -fPIC"
export LDFLAGS="-pie"

#### end sample env settings

./android-toolchain/bin/clang net.c

might have to explicitly make it PIE if >5.0 like:
~/bin/android-toolchain.21.aarch64/bin/clang -o server -fPIE tests.c -fPIE -pie

OR, based upon the above env settings:

$CC $CFLAGS $LDFLAGS -o server server.c -Itoolchain/sysroot/usr/include 2>&1

adb push a.out /data/local/tmp/




***************************************


apktool b -o u1-0.apk ubuild/
adb install u1-0.apk
keytool -genkey -v -keystore ~/.android/debug.newkeystore -alias signkey -keyalg RSA -keysize 2048 -validity 20000
jarsigner -verbose -keystore ~/.android/debug.newkeystore u1-0.apk signkey
adb install u1-0.apk 
adb uninstall sg.vantagepoint.uncrackable1
adb install u1-0.apk 
